###Example while.txt
While

while ($$cond::readConditional$$) {
	$$code::readCode$$
}
##### Turns into tokenized
While	while	(	$	$	cond	:	:	readConditional	$	$	)	{	$	$	code	:	:	readCode	$	$	}
## Or with new Rules
While	while	(	$$	cond	::	readConditional	$$	)	{	$$	code	::	readCode	$$	}
#####
Maybe adding suplementary tokenRules for
	$$
	::
	\$
	
#####
ReadList of all possible Files.
Remove/Load existing bin-Files
Compile/remove/load new code files

## ReadIns:
string _name = list[pos];
list.remove(0); // Remove name
string _filename = list[pos];
list.remove(0); // Remove Keyword
#region CODEDOM (Replace with correct calls)
using Common;
namespace MetaLanguageParser.MetaCode {}
class $"Code{name}" : CodeBase, ICode {}
_ctor::{ // Move them into BaseFile as get/protected set
	FileName = $"{_filename}"
	Name = $"{_name}"
//_prop::public,string,name="FileName",get=
//_prop::public,string,name="Name",get=
}
// protected List<string> readin = new List<string>(); // This as well
_meth::public,string,name="parse",args={{ref ExeBuilder eb}, {ref int pos}}
_body::{
	ListWalker list = eb.list;
	readin = this.readFile(ref eb, FileName); // This sets readin List and LocDict
	pos++; // skip Keyword
}
#endregion
string elem = "";
int pos2 = pos;
string key,value;
for(elem=list[pos];!list.isEOF;pos++) //foreach(var elem in list)
{
	if(elem.Equals("$$")){// $$ key :: value
		pos++
		key = list[pos]
		pos++
		assertNoInc("::"); // if getNext() != this, throw
		pos++
		if(funcDict.TryGetValue(list[pos], out value)){ // This gets "readConditional(ref list)" for elem "readConditional"
			_body::add($"dict.Add(\"{key}\", {value});")
		} else throw new InvalidOperationException("Invalid MethodCall");
		//pos++ ? // Does continue jump to inc as well?
	} else {
		if(elem.Length == 1) s = $"'{elem}'"
		else s = $"\"{elem}\""
		_body::add($"list.assert({s});")
	}
}
_body::Add($"return buildCode(readin, dict, ref eb.Indent);") // Maybe readin/dict is not required when it works properly with usual local
_body::Close